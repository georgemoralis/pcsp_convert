#pragma once

//====================================================================================================
//The Free Edition of Java to C++ Converter limits conversion output to 100 lines per file.

//To purchase the Premium Edition, visit our website:
//https://www.tangiblesoftwaresolutions.com/order/order-java-to-cplus.html
//====================================================================================================

#include "../Controller.h"
#include "../MainGUI.h"
#include <unordered_map>
#include <iostream>
#include <limits>
#include <optional>

/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace jpcsp::GUI
{

	using namespace jpcsp;
	using KeyEvent = java::awt::event::KeyEvent;
	using KeyListener = java::awt::event::KeyListener;
	using HashMap = java::util::HashMap;
	using JTextField = javax::swing::JTextField;
	using keyCode = jpcsp::Controller::keyCode;

	/**
	 *
	 * @author  shadow
	 */
	class SettingsGUI : public javax::swing::JFrame, public KeyListener
	{

	private:
		bool getKey = false;
		JTextField *sender;
		keyCode targetKey = static_cast<keyCode>(0);
		std::unordered_map<int, keyCode> currentKeys;
		std::unordered_map<keyCode, int> revertKeys; //kinda lame
		Controller *controller = nullptr;
		MainGUI *mainWindow = nullptr;

		/** Creates new form SettingsGUI */
	public:
		virtual ~SettingsGUI()
		{
			delete sender;
			delete controller;
			delete mainWindow;
			delete ClassicOpenDialogumd;
			delete bg;
			delete bgLabel1;
			delete buttonGroup1;
			delete disableGECheck;
			delete fgPanel;
			delete fieldAnalogDown;
			delete fieldAnalogLeft;
			delete fieldAnalogRight;
			delete fieldAnalogUp;
			delete fieldCircle;
			delete fieldCross;
			delete fieldDown;
			delete fieldHold;
			delete fieldHome;
			delete fieldLTrigger;
			delete fieldLeft;
			delete fieldMusic;
			delete fieldRTrigger;
			delete fieldRight;
			delete fieldScreen;
			delete fieldSelect;
			delete fieldSquare;
			delete fieldStart;
			delete fieldTriangle;
			delete fieldUp;
			delete fieldVolMin;
			delete fieldVolPlus;
			delete jButton1;
			delete jButtonCancel;
			delete jButtonOK;
			delete jLabel1;
			delete jPanel1;
			delete jTabbedPane1;
			delete openLogwindowCheck;
			delete pbpunpackcheck;
			delete recompilerCheck;
			delete saveWindowPosCheck;
			delete snapConsoleCheck;
			delete umdBrowser;
			delete umdpath;
		}

		SettingsGUI();

	private:
		void loadKeys();

	public:
		void keyTyped(KeyEvent *arg0) override;
		void keyReleased(KeyEvent *arg0) override;
		void keyPressed(KeyEvent *arg0) override;

	private:
		void setKey(JTextField *sender, keyCode targetKey);

	public:
		virtual void setController(Controller *controller);
		virtual void setMainGUI(MainGUI *mainWindow);

		/** This method is called from within the constructor to
		 * initialize the form.
		 * WARNING: Do NOT modify this code. The content of this method is
		 * always regenerated by the Form Editor.
		 */
	private:
//JAVA TO C++ CONVERTER TODO TASK: Most Java annotations will not have direct C++ equivalents:
//ORIGINAL LINE: @SuppressWarnings("unchecked") private void initComponents()
		void initComponents();

	private:
		class ActionListenerAnonymousInnerClass : public java::awt::event::ActionListener
		{
		private:
			SettingsGUI *outerInstance;

		public:
			virtual ~ActionListenerAnonymousInnerClass()
			{
				delete outerInstance;
			}

			ActionListenerAnonymousInnerClass(SettingsGUI *outerInstance);

			void actionPerformed(java::awt::event::ActionEvent *evt);
		};

	private:
		class ActionListenerAnonymousInnerClass2 : public java::awt::event::ActionListener
		{
		private:
			SettingsGUI *outerInstance;

		public:
			virtual ~ActionListenerAnonymousInnerClass2()
			{
				delete outerInstance;
			}

			ActionListenerAnonymousInnerClass2(SettingsGUI *outerInstance);

			void actionPerformed(java::awt::event::ActionEvent *evt);
		};

	private:
		class ActionListenerAnonymousInnerClass3 : public java::awt::event::ActionListener
		{
		private:
			SettingsGUI *outerInstance;


//====================================================================================================
//End of the allowed output for the Free Edition of Java to C++ Converter.

//To purchase the Premium Edition, visit our website:
//https://www.tangiblesoftwaresolutions.com/order/order-java-to-cplus.html
//====================================================================================================

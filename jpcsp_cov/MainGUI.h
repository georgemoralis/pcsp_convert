#pragma once

//====================================================================================================
//The Free Edition of Java to C++ Converter limits conversion output to 100 lines per file.

//To purchase the Premium Edition, visit our website:
//https://www.tangiblesoftwaresolutions.com/order/order-java-to-cplus.html
//====================================================================================================

#include "GUI/SettingsGUI.h"
#include "GUI/MemStickBrowser.h"
#include "Debugger/ConsoleWindow.h"
#include "Debugger/DisassemblerModule/DisassemblerFrame.h"
#include "Debugger/ElfHeaderInfo.h"
#include "Debugger/InstructionCounter.h"
#include "Debugger/MemoryViewer.h"
#include "GUI/UmdBrowser.h"
#include "HLE/pspdisplay.h"
#include "HLE/pspiofilemgr.h"
#include "util/JpcspDialogManager.h"
#include "util/MetaInformation.h"
#include "format/PSF.h"
#include "Emulator.h"
#include <string>
#include <vector>
#include <iostream>
#include <stdexcept>
#include "exceptionhelper.h"
#include "stringbuilder.h"

/*
This file is part of jpcsp.

Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace jpcsp
{

	using SettingsGUI = jpcsp::GUI::SettingsGUI;
	using MemStickBrowser = jpcsp::GUI::MemStickBrowser;
	using Point = java::awt::Point;
	using ComponentEvent = java::awt::event::ComponentEvent;
	using ComponentListener = java::awt::event::ComponentListener;
	using KeyEvent = java::awt::event::KeyEvent;
	using KeyListener = java::awt::event::KeyListener;
	using File = java::io::File;
	using JFileChooser = javax::swing::JFileChooser;
	using ConsoleWindow = jpcsp::Debugger::ConsoleWindow;
	using DisassemblerFrame = jpcsp::Debugger::DisassemblerModule::DisassemblerFrame;
	using ElfHeaderInfo = jpcsp::Debugger::ElfHeaderInfo;
	using InstructionCounter = jpcsp::Debugger::InstructionCounter;
	using MemoryViewer = jpcsp::Debugger::MemoryViewer;
	using UmdBrowser = jpcsp::GUI::UmdBrowser;
	using MetaInformation = jpcsp::util::MetaInformation;
	using namespace jpcsp::filesystems::umdiso;

	/**
	 *
	 * @author  shadow
	 */
	class MainGUI : public javax::swing::JFrame, public KeyListener, public ComponentListener
	{
	public:
		const std::string version = MetaInformation::FULL_NAME;
		ConsoleWindow *consolewin;
		DisassemblerFrame *disasm;
		ElfHeaderInfo *elfheader;
		MemoryViewer *memoryview;
		SettingsGUI *setgui;
		MemStickBrowser *memstick;
		Emulator *emulator;
		UmdBrowser *umdbrowser;
		InstructionCounter *instructioncounter;
	private:
		Point *mainwindowPos; // stores the last known window position
		bool snapConsole = true;

		/** Creates new form MainGUI */
	public:
		virtual ~MainGUI()
		{
			delete consolewin;
			delete disasm;
			delete elfheader;
			delete memoryview;
			delete setgui;
			delete memstick;
			delete emulator;
			delete umdbrowser;
			delete instructioncounter;
			delete mainwindowPos;
			delete About;
			delete DebugMenu;
			delete ElfHeaderViewer;
			delete EmulationMenu;
			delete EnterDebugger;
			delete EnterMemoryViewer;
			delete ExitEmu;
			delete FileMenu;
			delete HelpMenu;
			delete InstructionCounter;
			delete MenuBar;
			delete OpenFile;
			delete OpenMemStick;
			delete OptionsMenu;
			delete PauseButton;
			delete PauseEmu_Conflict;
			delete ResetButton;
			delete ResetEmu;
			delete RunButton;
			delete RunEmu_Conflict;
			delete SetttingsMenu;
			delete ToggleConsole;
			delete jToolBar1;
			delete openUmd;
		}

		MainGUI();

		/** This method is called from within the constructor to
		 * initialize the form.
		 * WARNING: Do NOT modify this code. The content of this method is
		 * always regenerated by the Form Editor.
		 */
	private:
//JAVA TO C++ CONVERTER TODO TASK: Most Java annotations will not have direct C++ equivalents:
//ORIGINAL LINE: @SuppressWarnings("unchecked") private void initComponents()
		void initComponents();

	private:
		class WindowAdapterAnonymousInnerClass : public java::awt::event::WindowAdapter
		{
		private:
			MainGUI *outerInstance;

		public:
			virtual ~WindowAdapterAnonymousInnerClass()
			{
				delete outerInstance;
			}

			WindowAdapterAnonymousInnerClass(MainGUI *outerInstance);

			void windowClosing(java::awt::event::WindowEvent *evt);
		};

	private:
		class ActionListenerAnonymousInnerClass : public java::awt::event::ActionListener
		{
		private:
			MainGUI *outerInstance;

		public:
			virtual ~ActionListenerAnonymousInnerClass()
			{
				delete outerInstance;
			}

			ActionListenerAnonymousInnerClass(MainGUI *outerInstance);

			void actionPerformed(java::awt::event::ActionEvent *evt);
		};

	private:
		class ActionListenerAnonymousInnerClass2 : public java::awt::event::ActionListener
		{
		private:
			MainGUI *outerInstance;

		public:
			virtual ~ActionListenerAnonymousInnerClass2()
			{
				delete outerInstance;
			}

			ActionListenerAnonymousInnerClass2(MainGUI *outerInstance);


//====================================================================================================
//End of the allowed output for the Free Edition of Java to C++ Converter.

//To purchase the Premium Edition, visit our website:
//https://www.tangiblesoftwaresolutions.com/order/order-java-to-cplus.html
//====================================================================================================

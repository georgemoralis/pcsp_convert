#pragma once

//====================================================================================================
//The Free Edition of Java to C++ Converter limits conversion output to 100 lines per file.

//To purchase the Premium Edition, visit our website:
//https://www.tangiblesoftwaresolutions.com/order/order-java-to-cplus.html
//====================================================================================================

#include "../Emulator.h"
#include "../Memory.h"
#include "../Allegrex/Decoder.h"
#include "../Allegrex/Common.h"
#include "../Allegrex/Instructions.h"
#include <string>
#include <map>
#include <limits>
#include <typeinfo>
#include <optional>
#include "exceptionhelper.h"
#include "../RectangularArrays.h"

//JAVA TO C++ CONVERTER NOTE: Forward class declarations:
namespace jpcsp::Debugger { class Task; }

/* This file is part of jpcsp.
Jpcsp is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Jpcsp is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jpcsp.  If not, see <http://www.gnu.org/licenses/>.
 */
namespace jpcsp::Debugger
{

	using SwingWorker = com::jidesoft::utils::SwingWorker;
	using PropertyChangeEvent = java::beans::PropertyChangeEvent;
	using PropertyChangeListener = java::beans::PropertyChangeListener;
	using Emulator = jpcsp::Emulator;

	/**
	 *
	 * @author  George
	 */
	class InstructionCounter : public javax::swing::JFrame, public PropertyChangeListener
	{

	private:
		Task *task;
	public:
		Emulator *emu;

		/** Creates new form InstructionCounter */
		virtual ~InstructionCounter()
		{
			delete task;
			delete emu;
			delete OpcodeTable;
			delete Save;
			delete areastatus;
			delete finicheck;
			delete initcheck;
			delete jLabel1;
			delete jScrollPane1;
			delete jScrollPane2;
			delete progressBar;
			delete startbutton;
			delete stubtextcheck;
			delete textcheck;
		}

		InstructionCounter(Emulator *emu);

		virtual void RefreshWindow();

		/** This method is called from within the constructor to
		 * initialize the form.
		 * WARNING: Do NOT modify this code. The content of this method is
		 * always regenerated by the Form Editor.
		 */
	private:
//JAVA TO C++ CONVERTER TODO TASK: Most Java annotations will not have direct C++ equivalents:
//ORIGINAL LINE: @SuppressWarnings("unchecked") private void initComponents()
		void initComponents();

	private:
		class ActionListenerAnonymousInnerClass : public java::awt::event::ActionListener
		{
		private:
			InstructionCounter *outerInstance;

		public:
			virtual ~ActionListenerAnonymousInnerClass()
			{
				delete outerInstance;
			}

			ActionListenerAnonymousInnerClass(InstructionCounter *outerInstance);

			void actionPerformed(java::awt::event::ActionEvent *evt);
		};

	private:
		class DefaultTableModelAnonymousInnerClass : public javax::swing::table::DefaultTableModel
		{
		private:
			InstructionCounter *outerInstance;

		public:
			virtual ~DefaultTableModelAnonymousInnerClass()
			{
				delete[] types;
				delete[] canEdit;
				delete outerInstance;
			}

//JAVA TO C++ CONVERTER NOTE: The following call to the 'RectangularArrays' helper class reproduces the rectangular array initialization that is automatic in Java:
//ORIGINAL LINE: public DefaultTableModelAnonymousInnerClass(InstructionCounter outerInstance)
			DefaultTableModelAnonymousInnerClass(InstructionCounter *outerInstance);

			std::type_info *types;
			bool *canEdit;

			std::type_info getColumnClass(int columnIndex);

			bool isCellEditable(int rowIndex, int columnIndex);
		};

	private:
		class ActionListenerAnonymousInnerClass2 : public java::awt::event::ActionListener
		{
		private:
			InstructionCounter *outerInstance;

		public:
			virtual ~ActionListenerAnonymousInnerClass2()
			{
				delete outerInstance;
			}

			ActionListenerAnonymousInnerClass2(InstructionCounter *outerInstance);

			void actionPerformed(java::awt::event::ActionEvent *evt);
		};

private:
	void startbuttonActionPerformed(java::awt::event::ActionEvent *evt);

	void SaveActionPerformed(java::awt::event::ActionEvent *evt);
	   /**
	     * Invoked when task's progress property changes.
	     */
	public:
		void propertyChange(PropertyChangeEvent *evt) override;
		virtual void proccesssections();

		virtual void findinitsections();
		virtual void findfinisections();
		virtual void findtextsections();
		virtual void findstubtextsections();
	public:
		class Task : public SwingWorker<Void*, Void*>
		{
		private:
			InstructionCounter *outerInstance;

		public:
			virtual ~Task()
			{
				delete outerInstance;
			}

			Task(InstructionCounter *outerInstance);

			/*
			 * Main task. Executed in background thread.
			 */
			Void *doInBackground() override;

			/*
			 * Executed in event dispatching thread
			 */
			void done() override;
		};
		// Let's instanciate this private member so the two following methods
		// can retrieve the right opcodes.  
	public:
		static jpcsp::Allegrex::Instructions *INSTRUCTIONS;

		virtual void refreshCounter();
		virtual void resetcounts();


		// Variables declaration - do not modify//GEN-BEGIN:variables
	private:
		javax::swing::JTable *OpcodeTable;
		javax::swing::JButton *Save;
		javax::swing::JTextArea *areastatus;
		javax::swing::JCheckBox *finicheck;
		javax::swing::JCheckBox *initcheck;
		javax::swing::JLabel *jLabel1;
		javax::swing::JScrollPane *jScrollPane1;
		javax::swing::JScrollPane *jScrollPane2;
		javax::swing::JProgressBar *progressBar;

//====================================================================================================
//End of the allowed output for the Free Edition of Java to C++ Converter.

//To purchase the Premium Edition, visit our website:
//https://www.tangiblesoftwaresolutions.com/order/order-java-to-cplus.html
//====================================================================================================
